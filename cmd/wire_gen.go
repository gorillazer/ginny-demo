// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/gorillazer/ginny"
	"github.com/gorillazer/ginny-config"
	"github.com/gorillazer/ginny-consul"
	"github.com/gorillazer/ginny-demo/internal/handlers"
	"github.com/gorillazer/ginny-demo/internal/repositories"
	"github.com/gorillazer/ginny-demo/internal/rpc/client"
	"github.com/gorillazer/ginny-demo/internal/services"
	"github.com/gorillazer/ginny-jaeger"
	"github.com/gorillazer/ginny-log"
	"github.com/gorillazer/ginny-mysql"
	"github.com/gorillazer/ginny-redis"
	"github.com/gorillazer/ginny-serve/grpc"
	"github.com/gorillazer/ginny-serve/http"
)

// Injectors from provider.go:

// CreateApp
func CreateApp(name string) (*ginny.Application, error) {
	viper, err := config.New(name)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	option, err := ginny.NewOption(viper, logger)
	if err != nil {
		return nil, err
	}
	serverOption, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	redisConfig, err := redis.NewConfig(viper)
	if err != nil {
		return nil, err
	}
	manager := redis.New(redisConfig, logger)
	mysqlConfig, err := mysql.NewConfig(viper)
	if err != nil {
		return nil, err
	}
	sqlBuilder := mysql.NewSqlBuilder(mysqlConfig, logger)
	userRepository := repositories.NewUserRepository(logger, manager, sqlBuilder)
	testService := services.NewTestService(logger, userRepository)
	clientOptions, err := grpc.NewClientOptions(viper)
	if err != nil {
		return nil, err
	}
	grpcClient, err := grpc.NewClient(clientOptions, tracer)
	if err != nil {
		return nil, err
	}
	apiConfig, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	consulClient, err := consul.New(apiConfig, logger)
	if err != nil {
		return nil, err
	}
	detailsClient, err := client.NewDetailsClient(grpcClient, consulClient)
	if err != nil {
		return nil, err
	}
	testHandler := handlers.NewTestHandler(viper, logger, testService, detailsClient)
	initHandlers := handlers.CreateInitHandlerFn(testHandler)
	engine := http.NewRouter(serverOption, logger, tracer, initHandlers)
	server, err := http.NewServer(serverOption, logger, engine)
	if err != nil {
		return nil, err
	}
	v, err := newServe(server, consulClient)
	if err != nil {
		return nil, err
	}
	application, err := ginny.NewApp(option, logger, v...)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// provider.go:

// Create http/grpc Serve
func newServe(
	hs *http.Server,
	cli *consul.Client,

) ([]ginny.Serve, error) {
	return []ginny.Serve{ginny.HttpServe(hs)}, nil
}

// appProvider
var appProvider = wire.NewSet(log.ProviderSet, config.ProviderSet, jaeger.ProviderSet, newServe, ginny.AppProviderSet)
