// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/main.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReqMultiError, or nil
// if none found.
func (m *HelloReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 32 {
		err := HelloReqValidationError{
			field:  "Name",
			reason: "value length must be at most 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HelloReqMultiError(errors)
	}

	return nil
}

// HelloReqMultiError is an error wrapping multiple validation errors returned
// by HelloReq.ValidateAll() if the designated constraints aren't met.
type HelloReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReqMultiError) AllErrors() []error { return m }

// HelloReqValidationError is the validation error returned by
// HelloReq.Validate if the designated constraints aren't met.
type HelloReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReqValidationError) ErrorName() string { return "HelloReqValidationError" }

// Error satisfies the builtin error interface
func (e HelloReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReqValidationError{}

// Validate checks the field values on TopicReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicReqMultiError, or nil
// if none found.
func (m *TopicReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 32 {
		err := TopicReqValidationError{
			field:  "Name",
			reason: "value length must be at most 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TopicReqMultiError(errors)
	}

	return nil
}

// TopicReqMultiError is an error wrapping multiple validation errors returned
// by TopicReq.ValidateAll() if the designated constraints aren't met.
type TopicReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicReqMultiError) AllErrors() []error { return m }

// TopicReqValidationError is the validation error returned by
// TopicReq.Validate if the designated constraints aren't met.
type TopicReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicReqValidationError) ErrorName() string { return "TopicReqValidationError" }

// Error satisfies the builtin error interface
func (e TopicReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicReqValidationError{}

// Validate checks the field values on RpcCliReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RpcCliReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RpcCliReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RpcCliReqMultiError, or nil
// if none found.
func (m *RpcCliReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RpcCliReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 32 {
		err := RpcCliReqValidationError{
			field:  "Name",
			reason: "value length must be at most 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RpcCliReqMultiError(errors)
	}

	return nil
}

// RpcCliReqMultiError is an error wrapping multiple validation errors returned
// by RpcCliReq.ValidateAll() if the designated constraints aren't met.
type RpcCliReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RpcCliReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RpcCliReqMultiError) AllErrors() []error { return m }

// RpcCliReqValidationError is the validation error returned by
// RpcCliReq.Validate if the designated constraints aren't met.
type RpcCliReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RpcCliReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RpcCliReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RpcCliReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RpcCliReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RpcCliReqValidationError) ErrorName() string { return "RpcCliReqValidationError" }

// Error satisfies the builtin error interface
func (e RpcCliReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRpcCliReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RpcCliReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RpcCliReqValidationError{}

// Validate checks the field values on HelloRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloResMultiError, or nil
// if none found.
func (m *HelloRes) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return HelloResMultiError(errors)
	}

	return nil
}

// HelloResMultiError is an error wrapping multiple validation errors returned
// by HelloRes.ValidateAll() if the designated constraints aren't met.
type HelloResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloResMultiError) AllErrors() []error { return m }

// HelloResValidationError is the validation error returned by
// HelloRes.Validate if the designated constraints aren't met.
type HelloResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloResValidationError) ErrorName() string { return "HelloResValidationError" }

// Error satisfies the builtin error interface
func (e HelloResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloResValidationError{}

// Validate checks the field values on TopicRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicResMultiError, or nil
// if none found.
func (m *TopicRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return TopicResMultiError(errors)
	}

	return nil
}

// TopicResMultiError is an error wrapping multiple validation errors returned
// by TopicRes.ValidateAll() if the designated constraints aren't met.
type TopicResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicResMultiError) AllErrors() []error { return m }

// TopicResValidationError is the validation error returned by
// TopicRes.Validate if the designated constraints aren't met.
type TopicResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicResValidationError) ErrorName() string { return "TopicResValidationError" }

// Error satisfies the builtin error interface
func (e TopicResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicResValidationError{}

// Validate checks the field values on RpcCliRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RpcCliRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RpcCliRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RpcCliResMultiError, or nil
// if none found.
func (m *RpcCliRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RpcCliRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return RpcCliResMultiError(errors)
	}

	return nil
}

// RpcCliResMultiError is an error wrapping multiple validation errors returned
// by RpcCliRes.ValidateAll() if the designated constraints aren't met.
type RpcCliResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RpcCliResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RpcCliResMultiError) AllErrors() []error { return m }

// RpcCliResValidationError is the validation error returned by
// RpcCliRes.Validate if the designated constraints aren't met.
type RpcCliResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RpcCliResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RpcCliResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RpcCliResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RpcCliResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RpcCliResValidationError) ErrorName() string { return "RpcCliResValidationError" }

// Error satisfies the builtin error interface
func (e RpcCliResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRpcCliRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RpcCliResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RpcCliResValidationError{}
