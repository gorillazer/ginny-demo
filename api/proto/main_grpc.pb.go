// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/proto/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SayClient is the client API for Say service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayClient interface {
	// 测试HelloWorld
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error)
	Topic(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicRes, error)
	RpcCli(ctx context.Context, in *RpcCliReq, opts ...grpc.CallOption) (*RpcCliRes, error)
}

type sayClient struct {
	cc grpc.ClientConnInterface
}

func NewSayClient(cc grpc.ClientConnInterface) SayClient {
	return &sayClient{cc}
}

func (c *sayClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRes, error) {
	out := new(HelloRes)
	err := c.cc.Invoke(ctx, "/pb.Say/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) Topic(ctx context.Context, in *TopicReq, opts ...grpc.CallOption) (*TopicRes, error) {
	out := new(TopicRes)
	err := c.cc.Invoke(ctx, "/pb.Say/Topic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) RpcCli(ctx context.Context, in *RpcCliReq, opts ...grpc.CallOption) (*RpcCliRes, error) {
	out := new(RpcCliRes)
	err := c.cc.Invoke(ctx, "/pb.Say/RpcCli", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayServer is the server API for Say service.
// All implementations must embed UnimplementedSayServer
// for forward compatibility
type SayServer interface {
	// 测试HelloWorld
	Hello(context.Context, *HelloReq) (*HelloRes, error)
	Topic(context.Context, *TopicReq) (*TopicRes, error)
	RpcCli(context.Context, *RpcCliReq) (*RpcCliRes, error)
	mustEmbedUnimplementedSayServer()
}

// UnimplementedSayServer must be embedded to have forward compatible implementations.
type UnimplementedSayServer struct {
}

func (UnimplementedSayServer) Hello(context.Context, *HelloReq) (*HelloRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedSayServer) Topic(context.Context, *TopicReq) (*TopicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topic not implemented")
}
func (UnimplementedSayServer) RpcCli(context.Context, *RpcCliReq) (*RpcCliRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcCli not implemented")
}
func (UnimplementedSayServer) mustEmbedUnimplementedSayServer() {}

// UnsafeSayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayServer will
// result in compilation errors.
type UnsafeSayServer interface {
	mustEmbedUnimplementedSayServer()
}

func RegisterSayServer(s grpc.ServiceRegistrar, srv SayServer) {
	s.RegisterService(&Say_ServiceDesc, srv)
}

func _Say_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Say_Topic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).Topic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/Topic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).Topic(ctx, req.(*TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Say_RpcCli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcCliReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).RpcCli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/RpcCli",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).RpcCli(ctx, req.(*RpcCliReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Say_ServiceDesc is the grpc.ServiceDesc for Say service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Say_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Say",
	HandlerType: (*SayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Say_Hello_Handler,
		},
		{
			MethodName: "Topic",
			Handler:    _Say_Topic_Handler,
		},
		{
			MethodName: "RpcCli",
			Handler:    _Say_RpcCli_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/main.proto",
}
